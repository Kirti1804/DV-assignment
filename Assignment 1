import pandas as pd

# Creating the Student DataFrame
student_data = {
    "Std_id": ["St11", "St12", "St13", "St14", "St15", "St16", "St17", "St18", "St19", "St20"],
    "name": ["Rama", "Krishna", "Balarama", "Hanuma", "Jaya", "Sita", "Radha", "Rukmini", "Lakshmi", "Bharatha"],
    "Sem": [1, 1, 2, 2, 3, 3, 3, 2, 1, 1],
    "age": [19, 20, 21, 18, 20, 22, 19, 17, 19, 22],
    "CGPA": [7.5, 8.9, 9.9, 9.5, 8.3, 8.5, 8.3, 8.1, 9.2, 9.5],
    "Dept_id": ["D1", "D1", "D2", "D2", "D3", "D4", "D4", "D4", "D1", "D2"]
}

student_df = pd.DataFrame(student_data)

# Creating the Department DataFrame
dept_data = {
    "Dept_id": ["D1", "D2", "D4", "D5", "D6"],
    "Dname": ["CSE", "Mech", "AI and ML", "ECE", "Civil"],
    "Dloc": ["Bangalore", "Goa", "Delhi", "Bangalore", "Mathura"],
    "D_Hod": ["Indra", "Chadra", "Surya", "Mourya", "Harsha"]
}

dept_df = pd.DataFrame(dept_data)

# Displaying the DataFrames
print("Student DataFrame:")
print(student_df)

print("\nDepartment DataFrame:")
print(dept_df)

#*************************************************************************************************************************
# 2.
# Performing inner join
inner_join_result = pd.merge(student_df, dept_df, on="Dept_id", how="inner")

# Performing outer join
outer_join_result = pd.merge(student_df, dept_df, on="Dept_id", how="outer")

# Displaying the results
print("Inner Join Result:")
print(inner_join_result)

print("\nOuter Join Result:")
print(outer_join_result)



#*************************************************************************************************************************
# 3. Merging based on Dept_id
merged_data = pd.merge(student_df, dept_df, on="Dept_id")

# Displaying the merged result
print("Merged Result:")
print(merged_data)




#*************************************************************************************************************************
#  4. Merging based on Dept_id
merged_data = pd.merge(student_df, dept_df, on="Dept_id")

# Extracting CSE department student details
cse_students = merged_data[merged_data["Dname"] == "CSE"]

# Displaying CSE department student details
print("CSE Department Student Details:")
print(cse_students)





#*************************************************************************************************************************
# 6. Extract only student details whose CGPA is greater than 9.0
high_cgpa_students = student_df[student_df["CGPA"] > 9.0]

print("High CGPA Students:")
print(high_cgpa_students)




#*************************************************************************************************************************
# 7. Rename the column Dname to dept_name
dept_df.rename(columns={"Dname": "dept_name"}, inplace=True)

print("\nRenamed Department DataFrame:")
print(dept_df)



#*************************************************************************************************************************
8. Find the highest and lowest CGPA in department wise
highest_cgpa_per_dept = student_df.groupby("Dept_id")["CGPA"].max()
lowest_cgpa_per_dept = student_df.groupby("Dept_id")["CGPA"].min()

print("\nHighest CGPA per Department:")
print(highest_cgpa_per_dept)

print("\nLowest CGPA per Department:")
print(lowest_cgpa_per_dept)




#*************************************************************************************************************************
# 9. Use loc method to extract specific rows from Dept table
selected_rows_dept = dept_df.loc[[1, 3]]

print("\nSelected Rows from Department Table:")
print(selected_rows_dept)




#*************************************************************************************************************************
# 10. Reshape the dept table
reshaped_dept_table = dept_df.pivot(index="dept_name", columns="Dloc", values="D_Hod")

print("\nReshaped Department Table:")
print(reshaped_dept_table)







